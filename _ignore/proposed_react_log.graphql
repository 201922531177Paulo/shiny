type RL {
  log: [RLItem!]!
}

interface RLItem {
  action: String!  # name of action
  time: Float! # seconds since ?
  session: String! # machine session id
  # ------------------------------
}

# "label": "ABC"
# "group_id": 2
type NodeDefinitionRLI implements RLItem {
  action: String! = "nodeDef"  # name of action
  time: Float! # seconds since ?
  session: String! # machine session id
  # ------------------------------
  label: String! # Name of node
  nodeId: Int!  # ID of node
  group_id: Int     # Group that the node belongs to
  type: "source" | "conductor" | "endpoint"
}

# "group_id": 2
# "label": "defer"
# "collapsed": true
type SuperGroupDefinitionRLI implements RLItem {
  action: String! = "superGroupDef"  # name of action
  time: Float! # seconds since ?
  session: String! # machine session id
  # ------------------------------
  group_id: Int! # group ID
  label: String! # name of group
  collapsed: Boolean! = false # should the group be open or closed by default
}

type BeginLogTimeRLI implements RLItem {
  action: String! = "beginLog"  # name of action
  time: Float! # seconds since ?
  session: String! # machine session id
  # -------------------------------
}






# "time": 5.43
# "nodeId": 1
# "action": "valueChange" | "ctx" | ...
interface RLEntry implements RLItem {
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String!  # name of action
  session: String! # machine session id
  # ------------------------------
}

# "value": " logi TRUE"
type ValueChangeRLE implements RLEntry {
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String! = "valueChange"  # name of action
  session: String! # machine session id
  # ------------------------------
  value: String!  # R captured output of value
}

# remove all dependencies
type InvalidateRLE implements RLEntry {
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String! = "invalidate" # name of action
  session: String! # machine session id
  # ------------------------------
}

# start working in node
type EnterRLE implements RLEntry {
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String! = "enter" # name of action
  session: String! # machine session id
  # ------------------------------
}
# stop working on node
type ExitRLE implements RLEntry {
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String! = "exit" # name of action
  session: String! # machine session id
  # ------------------------------
}

# "depNodeId": 2
type IsolateDependencyRLE implements RLEntry {
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String! = "isoDep" # name of action
  session: String! # machine session id
  # ------------------------------
  depNodeId: Int! # ID of node reading in isolate
}
type DependencyRLE implements RLEntry {
  # âˆš
  time: Float!     # seconds since ?
  nodeId: Int!    # ID of node
  action: String! = "dep" # name of action
  session: String! # machine session id
  # ------------------------------
  depNodeId: Int! # ID of parent node dependency
}
